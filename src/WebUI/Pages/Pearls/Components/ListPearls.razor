@using PearlsOfWisdom.WebUI.Clients
@using PearlsOfWisdom.WebUI.Pages.Pearls.Components.NewPearl
@implements IDisposable
@inject IPearlsListClient _client;
@inject PearlsListStateContainer StateContainer;

<h1>Pearls</h1>

<hr />

@if (!lists.Any())
{
  <p>Loading...</p>
}
else
{
  @foreach (PearlListVm list in lists)
  {
    <div class="container-fluid">
      <h3>@list.Title</h3>
      <NewPearl ListId="@list.Id" />
      @foreach (PearlItemVm item in list.Items)
      {
        <PearlListItem Model="@item"/>
      }
    </div>
  }
}

@code {

  private IList<PearlListVm> lists = new List<PearlListVm>();
  protected override async Task OnInitializedAsync()
  {
    StateContainer.OnStateChanged += OnStateContainerChanged;
    await GetPearls();
    await base.OnInitializedAsync();
  }

  private async Task OnStateContainerChanged()
  {
    await GetPearls();
    await InvokeAsync(StateHasChanged);
  }

  private async Task GetPearls()
  {
     lists = await _client.GetAllAsync();
  }

  public void Dispose()
  {
    StateContainer.OnStateChanged -= OnStateContainerChanged;
  }
}